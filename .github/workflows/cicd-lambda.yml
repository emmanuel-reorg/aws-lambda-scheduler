name: AWS Scheduled Lambda CI-DC

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  deploy:
    name: Deploy AWS Lambda function
    environment:
      name: develop
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - uses: docker/metadata-action@v4
      #   env:
      #     ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
      #     ECR_REPOSITORY: lambda-schedule
      #   id: metadata
      #   with:
      #     images: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
      #     flavor: latest=false
          
      # - name: Push docker image   
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      #     tags: latest
      #     labels: ${{ steps.metadata.outputs.labels }}
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fastapi-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c 1-7)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Deploy a function
      - uses: int128/deploy-lambda-action@v1
        with:
          function-name: scheduled_lambda
          image-uri: ${{ steps.build-image.outputs.image }}
          alias-name: orion

      # - name: Retrieve Docker Image URI
      #   id: get-image-uri
      #   run: |
      #     IMAGE_URI="${{ steps.build-image.env.ECR_REGISTRY }}/${{ steps.build-image.env.ECR_REPOSITORY }}:${{ steps.build-image.env.IMAGE_TAG }}"
      #     echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
      #     echo "::set-output name=image_uri::$IMAGE_URI"

      # - name: Update Lambda Function
      #   run: |
      #     aws lambda update-function-code \
      #       --function-name scheduled_lambda \
      #       --image-uri ${{ steps.get-image-uri.outputs.image_uri }}
